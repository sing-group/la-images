<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>es.uvigo.ei.sing</groupId>
		<artifactId>la-images</artifactId>
		<version>1.1.4-SNAPSHOT</version>
		<relativePath>../pom.xml</relativePath>
	</parent>

	<artifactId>la-images-aibench</artifactId>
	<packaging>jar</packaging>
	<name>LA-iMageS</name>
	
	<dependencies>
		<dependency>
			<groupId>es.uvigo.ei.sing</groupId>
			<artifactId>la-images-gui</artifactId>
		</dependency>
		<dependency>
			<groupId>es.uvigo.ei.sing</groupId>
			<artifactId>la-images-core</artifactId>
		</dependency>
		<dependency>
			<groupId>es.uvigo.ei.sing</groupId>
			<artifactId>aibench-aibench</artifactId>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>es.uvigo.ei.sing</groupId>
			<artifactId>aibench-core</artifactId>
			<scope>compile</scope>
			<exclusions>
				<exclusion>
					<groupId>*</groupId>
					<artifactId>*</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>es.uvigo.ei.sing</groupId>
			<artifactId>aibench-workbench</artifactId>
			<scope>compile</scope>
			<exclusions>
				<exclusion>
					<groupId>*</groupId>
					<artifactId>*</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.easymock</groupId>
			<artifactId>easymock</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<profiles>
		<profile>
			<id>createInstallers</id>
			<properties>
				<should.skip.installer>false</should.skip.installer>
				<should.skip.download>false</should.skip.download>
				
				<!--
				 Installer requisites:
					* mingw-w64
					* wine
					* A Win64 JRE version 8 or later
					* NSIS uncompressed in some folder (will use makensis.exe)
				-->
				<jre.simplepath>jre1.8.0_74</jre.simplepath>
				<jre.64b.path>z:\${project.build.directory}\java-installer-resources\windows\64b\${jre.simplepath}</jre.64b.path>
				<jre.32b.path>z:\${project.build.directory}\java-installer-resources\windows\32b\${jre.simplepath}</jre.32b.path>
				<nsis.path>${project.build.directory}/java-installer-resources/NSIS</nsis.path>
				<target.exluded.dirs>java-installer-resources</target.exluded.dirs>
			</properties>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-resources-plugin</artifactId>
						<configuration>
							<encoding>UTF-8</encoding>
						</configuration>
						<executions>
							<execution>
								<id>copy-resources-installer</id>
								<phase>validate</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${project.build.directory}/dist</outputDirectory>
									<resources>
										<resource>
											<directory>src/main/resources/installer</directory>
											<filtering>false</filtering>
											 <excludes>
									          <exclude>**/*.res</exclude>
									          <exclude>**/*.txt</exclude>
									          <exclude>**/*.nsi</exclude>
									          <exclude>**/*.rc</exclude>
									          <exclude>**/*.c</exclude>
									        </excludes>
										</resource>
										<resource>
											<directory>src/main/resources/installer</directory>
											<filtering>true</filtering>
											 <includes>
									          <include>**/*.res</include>
									          <include>**/*.txt</include>
									          <include>**/*.nsi</include>
									          <include>**/*.rc</include>
									          <include>**/*.c</include>
									        </includes>
										</resource>
									</resources>
								</configuration>
							</execution>
							
							<execution>
								<id>copy-resources-installer-32b</id>
								<phase>validate</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${project.build.directory}/dist32</outputDirectory>
									<resources>
										<resource>
											<directory>src/main/resources/installer32</directory>
											<filtering>false</filtering>
											 <excludes>
									          <exclude>**/*.res</exclude>
									          <exclude>**/*.txt</exclude>
									          <exclude>**/*.nsi</exclude>
									          <exclude>**/*.rc</exclude>
									          <exclude>**/*.c</exclude>
									        </excludes>
										</resource>
										<resource>
											<directory>src/main/resources/installer32</directory>
											<filtering>true</filtering>
											 <includes>
									          <include>**/*.res</include>
									          <include>**/*.txt</include>
									          <include>**/*.nsi</include>
									          <include>**/*.rc</include>
									          <include>**/*.c</include>
									        </includes>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>
					
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<executions>
							<execution>
								<id>create-installer</id>
								<phase>package</phase>
								<configuration>
									<skip>${should.skip.installer}</skip>
									<target>
										<exec executable="i686-w64-mingw32-windres">
										    <arg value="${project.build.directory}/dist/resources.rc" />
										    <arg value="-O" />
										    <arg value="coff" />
										    <arg value="-o" />
											<arg value="${project.build.directory}/dist/resources.res" />
										</exec>
										<exec executable="i686-w64-mingw32-gcc">
										    <arg value="-Wl,-subsystem,windows" />
										    <arg value="${project.build.directory}/dist/la-images-launcher.c" />
										    <arg value="-o" />
										    <arg value="${project.build.directory}/dist/la-images.exe" />
											<arg value="${project.build.directory}/dist/resources.res" />
										</exec>
										<exec executable="${nsis.path}/makensis.exe">
											<arg value="target/dist/installer-script.nsi" />
										</exec>
										<delete includeemptydirs="true">
		    								<fileset dir="${project.build.directory}/dist/" excludes="setup.exe"/>
										</delete>
									</target>
								</configuration>
								<goals>
									<goal>run</goal>
								</goals>
							</execution>
							<execution>
								<id>create-installer-32b</id>
								<phase>package</phase>
								<configuration>
									<skip>${should.skip.installer}</skip>
									<target>
										<exec executable="i686-w64-mingw32-windres">
										    <arg value="${project.build.directory}/dist32/resources.rc" />
										    <arg value="-O" />
										    <arg value="coff" />
										    <arg value="-o" />
											<arg value="${project.build.directory}/dist32/resources.res" />
										</exec>
										<exec executable="i686-w64-mingw32-gcc">
										    <arg value="-Wl,-subsystem,windows" />
										    <arg value="${project.build.directory}/dist32/la-images-launcher.c" />
										    <arg value="-o" />
										    <arg value="${project.build.directory}/dist32/la-images.exe" />
											<arg value="${project.build.directory}/dist32/resources.res" />
										</exec>
										<exec executable="${nsis.path}/makensis.exe">
											<arg value="target/dist32/installer-script.nsi" />
										</exec>
										<delete includeemptydirs="true">
		    								<fileset dir="${project.build.directory}/dist32/" excludes="setup.exe"/>
										</delete>
									</target>
								</configuration>
								<goals>
									<goal>run</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>createDistributables</id>
			<properties>
				<should.skip.download>false</should.skip.download>
				<should.skip.distributable>false</should.skip.distributable>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-assembly-plugin</artifactId>
						<configuration>
							<skipAssembly>${should.skip.distributable}</skipAssembly>
							<finalName>${project.name}-${project.version}</finalName>
							<appendAssemblyId>true</appendAssemblyId>
							<descriptors>
								<descriptor>assembly/linux.xml</descriptor>
								<descriptor>assembly/linux-32b.xml</descriptor>
								<descriptor>assembly/windows.xml</descriptor>
								<descriptor>assembly/windows-32b.xml</descriptor>
							</descriptors>
						</configuration>
						<executions>
							<execution>
								<id>distribution</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<build>
		<directory>${project.basedir}/target</directory>
		<outputDirectory>${project.build.directory}/plugins_bin/${project.artifactId}</outputDirectory>
		<plugins>
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<configuration>
					<encoding>UTF-8</encoding>
				</configuration>
				<executions>
					<!-- copy conf -->
					<execution>
						<id>copy-resources-conf</id>
						<!-- here the phase you need -->
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/conf</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/resources/conf</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
					<!-- copy scripts -->
					<execution>
						<id>copy-resources-scripts</id>
						<!-- here the phase you need -->
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/resources/scripts</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
					
					<!-- copy help resources -->
					<execution>
						<id>copy-resources-help</id>
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/help</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/resources/help</directory>
									<filtering>false</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>					
				</executions>
			</plugin>
			
			<plugin>
				<groupId>com.googlecode.maven-download-plugin</groupId>
				<artifactId>download-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>download-java-installer-resources-windows</id>
						<phase>validate</phase>
						<goals>
							<goal>wget</goal>
						</goals>
						<configuration>
							<skip>${should.skip.download}</skip>
							<url>http://sing.ei.uvigo.es/maven2/resources/java-installer-resources-windows-1.8.0_74.zip</url>
							<unpack>true</unpack>
							<outputDirectory>${project.build.directory}/java-installer-resources</outputDirectory>
							<md5>94e49b3beefa3f4cc1a2b195aa108c59</md5>
						</configuration>
					</execution>
					<execution>
						<id>download-java-installer-resources-linux</id>
						<phase>validate</phase>
						<goals>
							<goal>wget</goal>
						</goals>
						<configuration>
							<skip>${should.skip.download}</skip>
							<url>http://sing.ei.uvigo.es/maven2/resources/java-installer-resources-linux-1.8.0_74.zip</url>
							<unpack>true</unpack>
							<outputDirectory>${project.build.directory}/java-installer-resources</outputDirectory>
							<md5>7ca41346fc426f24073db938e5959b66</md5>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>

					<!-- aibench core libraries -->
					<execution>
						<id>copy-dependencies-aibench-lib</id>
						<phase>process-resources</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/lib</outputDirectory>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>false</overWriteSnapshots>
							<overWriteIfNewer>true</overWriteIfNewer>
							<includeArtifactIds>${aibench.lib.artifactIds}</includeArtifactIds>
						</configuration>
					</execution>


					<!-- aibench plugins -->
					<execution>
						<id>copy-dependencies-aibench-plugins</id>
						<phase>process-resources</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/plugins_bin</outputDirectory>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>false</overWriteSnapshots>
							<overWriteIfNewer>true</overWriteIfNewer>
							<includeArtifactIds>${aibench.plugins.artifactIds}</includeArtifactIds>
						</configuration>
					</execution>

					<!-- rest of dependencies inside current aibench plugin -->
					<execution>
						<id>copy-dependencies-plugin-dependencies</id>
						<phase>process-resources</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.outputDirectory}</outputDirectory>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>false</overWriteSnapshots>
							<overWriteIfNewer>true</overWriteIfNewer>
							<excludeArtifactIds>${aibench.plugins.artifactIds},${aibench.lib.artifactIds}</excludeArtifactIds>
						</configuration>
					</execution>

				</executions>
			</plugin>
		</plugins>

		<!-- ignore /src/main/resources/scripts and /src/main/resources/conf, which 
			will go to the root of the target directory, not inside the current aibench 
			plugin -->
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>false</filtering>
				<excludes>
					<exclude>conf/**/*</exclude>
					<exclude>conf</exclude>
					<exclude>scripts/**/*</exclude>
					<exclude>scripts</exclude>
					<exclude>laimages.properties</exclude>
					<exclude>installer*/**/*</exclude>
					<exclude>installer*</exclude>
					<exclude>help/**/*</exclude>
					<exclude>help</exclude>
					<exclude>dist/**/*</exclude>
					<exclude>dist</exclude>
					<exclude>dist32/**/*</exclude>
					<exclude>dist32</exclude>
				</excludes>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
				<includes>
					<include>plugin.xml</include>
					<include>laimages.properties</include>
				</includes>
			</resource>
		</resources>
		
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											com.googlecode.maven-download-plugin
										</groupId>
										<artifactId>
											download-maven-plugin
										</artifactId>
										<versionRange>
											[1.2.1,)
										</versionRange>
										<goals>
											<goal>wget</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
</project>
